name: website

on: 
  push:
    branches: main

jobs:
  LectureNotePages:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.4
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      # new version (4.0.2) of sphinx has bugs of Jinjia2 when parsing Jupyter notebook, so change to 4.0.1
      - name: Install tools
        run: |
          pip install sphinx sphinx_rtd_theme sphinxcontrib-bibtex matplotlib pandas numpy nbconvert ipykernel sphinx_inline_tabs
          sudo apt-get install pandoc
          sudo apt-get install hugo
          
      # # debug workflows: you could use ssh to login the github runner and test something
      # # - name: install oh my zsh
      # #   run: |
      # #     sudo apt-get install zsh
      # #     sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
      # - name: Setup tmate session
      #   uses: mxschmitt/action-tmate@v3

      
      # simple version
      # - name: Generate main pages and sphinx pages
      #   run: |
      #     # fetch history lecture pages
      #     git fetch origin gh-pages
      #     git checkout gh-pages
      #     mkdir ../history
      #     cp -rf winter2020 ../history
      #     cp -rf summer2021 ../history
      #     git checkout main
      #     # make home page
      #     cd home
      #     hugo
      #     cd ..
      #     cp -rf home/public/ .
      #     # make new lecture pages
      #     cd Summer2022
      #     make html
      #     cp -rf build/html/* ../public/summer2022
      #     # copy history lecture pages
      #     cd ..
      #     cp -rf ../history/winter2020/* public/winter2020
      #     cp -rf ../history/summer2021/* public/summer2021

      # more automatic version
      - name: Generate main pages and sphinx pages
        run: |
          # 0. set lectures 
          lectures="Winter2020 Summer2021 Summer2022 Winter2022 Winter2023"
          commitIDFile_stored=commit.ID
          # 1. fetch history lecture pages and copy them to history folder as backup
          git fetch origin gh-pages
          git checkout gh-pages
          mkdir ../history
          for lecture in $lectures
          do
            # note that the folder name in Hugo pages is all in lower case
            cp -rf `echo "$lecture" | awk '{print tolower($0)}'` ../history
          done
          git checkout main
          # 2. make home page
          cd home
          hugo
          cd ..
          cp -rf home/public/ .
          # 3. make lecture pages
          # check is lecture source folder is updated or not, if updated then sphinx it, otherwise just copy the backup page files
          # 3.1 get last commit id: note that the Github actions default use *** mode, `git log` can only get the latest commit, so need `git pull origin --unshallow` to get full log
          git pull origin --unshallow
          # 3.2 for loop lectures and process it
          for lecture in $lectures
          do
          lectureName_hugo=`echo "$lecture" | awk '{print tolower($0)}'`
          # 3.2.1 get last commit of the page source stored in the page folder
          lastcommit=""
          commitIDFile=../history/${lectureName_hugo}/${commitIDFile_stored}
          if [ -f ${commitIDFile} ]; then 
            cat ${commitIDFile}
            lastcommit=`awk 'NR==1{print $1}' ${commitIDFile}`
            echo "last commit ID of ${lecture}: " $lastcommit
          else
            echo "last commit ID of ${lecture} is not stored in pages folder, use the penultimate one"
            lastcommits=(`git log --format="%H" -n 2`)
            lastcommit=${lastcommits[1]}
            echo "The penultimate one commit is " $lastcommit
          fi
          # 3.2.2 compare source of current commit and that of last build
          if [[ -n $(git diff ${lastcommit} ${lecture}/) ]]
          then
            echo $lecture " is updated compare to the last sphinx, sphinx it!"
            cd ${lecture}
            make html
            # write current commit ID to lecture folder
            echo `git log --format="%H" -n 1` >build/html/${commitIDFile_stored}
            cp -rf build/html/* ../public/$lectureName_hugo
            cd ..
          else
            echo $lecture " is not updated in this commit, keep the previous pages!"
            cp -rf ../history/${lectureName_hugo}/* public/${lectureName_hugo}
          fi
          done

      # # uncomment this segment to generate pdf file
      # - name: Generate latex and pdf
      #   run: |
      #     sudo apt-get install texlive-full
      #     cd sphinx && make latex
      #     cd build/latex && make && cp LectureNote.pdf ../html/downloads && cd ../..
          
      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public