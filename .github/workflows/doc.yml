name: website

on: 
  push:
    branches: main

jobs:
  LectureNotePages:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.4

      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install tools
        run: |
          pip install sphinx sphinx_rtd_theme sphinxcontrib-bibtex matplotlib pandas numpy nbconvert ipykernel sphinx_inline_tabs sphinx_copybutton
          sudo apt-get install pandoc
          sudo apt-get install hugo

      # safer version
      - name: Generate main pages and sphinx pages
        run: |
          # 0. Set lectures
          lectures="Winter2020 Summer2021 Summer2022 Winter2022 Winter2023 Summer2024 Summer2025"
          commitIDFile_stored=commit.ID

          # 1. Fetch history
          git fetch origin gh-pages
          git checkout gh-pages
          mkdir ../history

          for lecture in $lectures
          do
            lecture_lc=$(echo "$lecture" | awk '{print tolower($0)}')
            if [ -d "$lecture_lc" ]; then
              cp -rf "$lecture_lc" ../history
            else
              echo "Lecture folder $lecture_lc does not exist on gh-pages, skipping."
            fi
          done

          git checkout main

          # 2. Make home page
          cd home
          hugo
          cd ..
          cp -rf home/public/ .

          # 3. Build lectures
          git pull origin --unshallow

          for lecture in $lectures
          do
            lectureName_hugo=$(echo "$lecture" | awk '{print tolower($0)}')

            # find last commit ID
            lastcommit=""
            commitIDFile=../history/${lectureName_hugo}/${commitIDFile_stored}
            if [ -f ${commitIDFile} ]; then 
              cat ${commitIDFile}
              lastcommit=$(awk 'NR==1{print $1}' ${commitIDFile})
              echo "last commit ID of ${lecture}: $lastcommit"
            else
              echo "last commit ID of ${lecture} is not stored, use the penultimate one"
              lastcommits=($(git log --format="%H" -n 2))
              lastcommit=${lastcommits[1]}
              echo "The penultimate one commit is $lastcommit"
            fi

            # compare changes
            if [[ -n $(git diff ${lastcommit} ${lecture}/) ]]
            then
              echo "$lecture is updated compared to last build, rebuilding!"
              cd ${lecture}
              make html
              echo $(git log --format="%H" -n 1) > build/html/${commitIDFile_stored}
              if [ ! -d "../public/${lectureName_hugo}" ]; then
                mkdir ../public/${lectureName_hugo}
              fi
              cp -rf build/html/* ../public/${lectureName_hugo}
              cd ..
            else
              echo "$lecture is not updated, keeping previous pages if available."
              if [ ! -d "public/${lectureName_hugo}" ]; then
                mkdir public/${lectureName_hugo}
              fi
              if [ -d "../history/${lectureName_hugo}" ]; then
                cp -rf ../history/${lectureName_hugo}/* public/${lectureName_hugo}
              else
                echo "No history available for ${lectureName_hugo}, skipping copy."
              fi
            fi
          done

      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public
