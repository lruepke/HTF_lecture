import numpy as np

def ip_triangle(nip):
    """
    Integration rules (points & weights) for triangular elements.

    Args:
        nip (int): Number of integration points.

    Returns:
        ipx (numpy.ndarray): Integration points.
        ipw (numpy.ndarray): Integration weights.
    """
    if nip == 1:
        ipx = np.array([[1/3, 1/3]])
        ipw = np.array([0.5])

    elif nip == 3:
        ipx = np.array([
            [1/6, 1/6],
            [2/3, 1/6],
            [1/6, 2/3]
        ])
        ipw = np.array([1/6, 1/6, 1/6])

    elif nip == 4:
        ipx = np.array([
            [1.0/3.0, 1.0/3.0],
            [0.6, 0.2],
            [0.2, 0.6],
            [0.2, 0.2]
        ])
        ipw = np.array([-27.0/48.0, 25.0/48.0, 25.0/48.0, 25.0/48.0]) * 0.5

    elif nip == 6:
        g1 = (8 - np.sqrt(10) + np.sqrt(38 - 44 * np.sqrt(2/5))) / 18
        g2 = (8 - np.sqrt(10) - np.sqrt(38 - 44 * np.sqrt(2/5))) / 18
        ipx = np.array([
            [1 - 2 * g1, g1],
            [g1, 1 - 2 * g1],
            [g1, g1],
            [1 - 2 * g2, g2],
            [g2, 1 - 2 * g2],
            [g2, g2]
        ])
        w1 = (620 + np.sqrt(213125 - 53320 * np.sqrt(10))) / 3720
        w2 = (620 - np.sqrt(213125 - 53320 * np.sqrt(10))) / 3720
        ipw = np.array([w1, w1, w1, w2, w2, w2]) * 0.5

    elif nip == 7:
        g1 = (6 - np.sqrt(15)) / 21
        g2 = (6 + np.sqrt(15)) / 21
        ipx = np.array([
            [1/3, 1/3],
            [1 - 2 * g1, g1],
            [g1, 1 - 2 * g1],
            [g1, g1],
            [1 - 2 * g2, g2],
            [g2, 1 - 2 * g2],
            [g2, g2]
        ])
        w1 = (155 - np.sqrt(15)) / 1200
        w2 = (155 + np.sqrt(15)) / 1200
        ipw = np.array([0.225, w1, w1, w1, w2, w2, w2]) * 0.5

    elif nip == 77:  # LABATTO
        ipx = np.array([
            [0, 0],
            [1, 0],
            [0, 1],
            [1/2, 1/2],
            [1/2, 0],
            [0, 1/2],
            [1/3, 1/3]
        ])
        ipw = np.array([1/40, 1/40, 1/40, 1/15, 1/15, 1/15, 9/40])

    elif nip == 12:
        ipx = np.array([
            [0.873821971016996, 0.063089014491502],
            [0.063089014491502, 0.873821971016996],
            [0.063089014491502, 0.063089014491502],
            [0.501426509658179, 0.249286745170910],
            [0.249286745170910, 0.501426509658179],
            [0.249286745170910, 0.249286745170910],
            [0.636502499121399, 0.310352451033785],
            [0.310352451033785, 0.636502499121399],
            [0.636502499121399, 0.053145049844816],
            [0.053145049844816, 0.636502499121399],
            [0.310352451033785, 0.053145049844816],
            [0.053145049844816, 0.310352451033785]
        ])
        ipw = np.array([
            0.050844906370207, 0.050844906370207, 0.050844906370207,
            0.116786275726379, 0.116786275726379, 0.116786275726379,
            0.082851075618374, 0.082851075618374, 0.082851075618374,
            0.082851075618374, 0.082851075618374, 0.082851075618374
        ]) * 0.5

    elif nip == 25:
        ipx = np.array([
            [0.333333333333333, 0.333333333333333],
            [0.028844733232685, 0.485577633383657],
            [0.485577633383657, 0.028844733232685],
            [0.485577633383657, 0.485577633383657],
            [0.781036849029926, 0.109481575485037],
            [0.109481575485037, 0.781036849029926],
            [0.109481575485037, 0.109481575485037],
            [0.141707219414880, 0.307939838764121],
            [0.307939838764121, 0.141707219414880],
            [0.141707219414880, 0.550352941820999],
            [0.550352941820999, 0.141707219414880],
            [0.307939838764121, 0.550352941820999],
            [0.550352941820999, 0.307939838764121],
            [0.025003534762686, 0.246672560639903],
            [0.246672560639903, 0.025003534762686],
            [0.025003534762686, 0.728323904597411],
            [0.728323904597411, 0.025003534762686],
            [0.246672560639903, 0.728323904597411],
            [0.728323904597411, 0.246672560639903],
            [0.009540815400299, 0.066803251012200],
            [0.066803251012200, 0.009540815400299],
            [0.009540815400299, 0.923655933587500],
            [0.923655933587500, 0.009540815400299],
            [0.066803251012200, 0.923655933587500],
            [0.923655933587500, 0.066803251012200]
        ])
        ipw = np.array([
            0.090817990382754,
            0.036725957756467, 0.036725957756467, 0.036725957756467,
            0.045321059435528, 0.045321059435528, 0.045321059435528,
            0.072757916845420, 0.072757916845420, 0.072757916845420,
            0.072757916845420, 0.072757916845420, 0.072757916845420,
            0.028327242531057, 0.028327242531057, 0.028327242531057,
            0.028327242531057, 0.028327242531057, 0.028327242531057,
            0.009421666963733, 0.009421666963733, 0.009421666963733,
            0.009421666963733, 0.009421666963733, 0.009421666963733
        ]) * 0.5

    else:
        raise ValueError('Unknown integration rule')

    return ipx, ipw
