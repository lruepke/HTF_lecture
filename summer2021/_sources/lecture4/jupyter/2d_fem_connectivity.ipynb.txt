{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "1584b181",
   "metadata": {},
   "source": [
    "# 2-D FEM coordinate and connectivity matrices"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "12d98e89",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from tabulate import tabulate"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b5397adc",
   "metadata": {},
   "source": [
    "Let's first create the global coordinate vector. The columns refer to the nodes, and the rows to the x,y coordinates. \n",
    "\n",
    "One issue is the index counting in python. Remember that the first element in an array is stored at index 0. We have two options: if we want to start counting our elements/nodes at 1, we always have to substrat 1 to get the storage index; or we use the less intuitive way of counting and have the first node/element be 0. Let's use the second option.\n",
    "\n",
    "Another is the direction in which we count. We can either count in the row direction, or in the collumn direction. These two ways are called **column major** or **row major**. Related to this is the way that data is stored in the memory. If the data is stored **F contiguous**, the data is stored in the column direction; if it is **C contiguous** then in the row direction. Matlab is **F contiguous**, while python is **C contiguous** (by default, it can handle both).\n",
    "\n",
    "You can find more info here: https://stackoverflow.com/questions/26998223/what-is-the-difference-between-contiguous-and-non-contiguous-arrays\n",
    "\n",
    "Bottom line is, in python we should count in the row direction.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ca6bd722",
   "metadata": {},
   "source": [
    "Let's make some simple examples:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "27b73b97",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 1  2  3  4  5  6  7  8  9 10 11 12]\n",
      "  C_CONTIGUOUS : True\n",
      "  F_CONTIGUOUS : True\n",
      "  OWNDATA : True\n",
      "  WRITEABLE : True\n",
      "  ALIGNED : True\n",
      "  WRITEBACKIFCOPY : False\n",
      "  UPDATEIFCOPY : False\n",
      "\n",
      "[[ 1  2  3  4]\n",
      " [ 5  6  7  8]\n",
      " [ 9 10 11 12]]\n",
      "  C_CONTIGUOUS : True\n",
      "  F_CONTIGUOUS : False\n",
      "  OWNDATA : False\n",
      "  WRITEABLE : True\n",
      "  ALIGNED : True\n",
      "  WRITEBACKIFCOPY : False\n",
      "  UPDATEIFCOPY : False\n",
      "\n",
      "4\n"
     ]
    }
   ],
   "source": [
    "A = np.arange(1,13)\n",
    "print(A)\n",
    "print(A.flags)\n",
    "\n",
    "B = np.reshape(A,(3,4))\n",
    "print(B)\n",
    "print(B.flags)\n",
    "print(np.take(B, 3)) # linear index\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5192ef47",
   "metadata": {},
   "source": [
    "Array B is **C_CONTIGUOUS** and the natural way to store the data and to not make mistakes during reshapes is to count in the row direction.\n",
    "\n",
    "Here are some useful links on indexing:\n",
    "https://kanoki.org/2020/07/05/numpy-index-array-with-another-array/\n",
    "https://realpython.com/numpy-array-programming/\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3af6fb1c",
   "metadata": {},
   "source": [
    "Alright, let's do the coordinate vector. First node should have the index **0** and we count in row direction!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "4e47179e",
   "metadata": {},
   "outputs": [],
   "source": [
    "lx          = 1\n",
    "ly          = 1\n",
    "nx          = 5\n",
    "ny          = 4\n",
    "nnodel      = 4\n",
    "dx          = lx/(nx-1)\n",
    "dy          = ly/(ny-1)\n",
    "\n",
    "nex         = nx-1\n",
    "ney         = ny-1\n",
    "nnod        = nx*ny\n",
    "nel         = nex*ney\n",
    "GCOORD      = np.zeros((nnod,2))\n",
    "\n",
    "id = 0\n",
    "\n",
    "#for i in ??:\n",
    "#    for j in ??:\n",
    "#        GCOORD[id,0] = ??\n",
    "#        GCOORD[id,1] = ??\n",
    "#        id          = id + 1\n",
    "                       \n",
    "#print(tabulate(GCOORD, headers=['Node #', 'X', 'Y'], showindex=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "86249aad",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  Node #     X         Y\n",
      "--------  ----  --------\n",
      "       0  0     0\n",
      "       1  0.25  0\n",
      "       2  0.5   0\n",
      "       3  0.75  0\n",
      "       4  1     0\n",
      "       5  0     0.333333\n",
      "       6  0.25  0.333333\n",
      "       7  0.5   0.333333\n",
      "       8  0.75  0.333333\n",
      "       9  1     0.333333\n",
      "      10  0     0.666667\n",
      "      11  0.25  0.666667\n",
      "      12  0.5   0.666667\n",
      "      13  0.75  0.666667\n",
      "      14  1     0.666667\n",
      "      15  0     1\n",
      "      16  0.25  1\n",
      "      17  0.5   1\n",
      "      18  0.75  1\n",
      "      19  1     1\n"
     ]
    }
   ],
   "source": [
    "# hide\n",
    "lx          = 1\n",
    "ly          = 1\n",
    "nx          = 5\n",
    "ny          = 4\n",
    "nnodel      = 4\n",
    "dx          = lx/(nx-1)\n",
    "dy          = ly/(ny-1)\n",
    "\n",
    "nex         = nx-1\n",
    "ney         = ny-1\n",
    "nnod        = nx*ny\n",
    "nel         = nex*ney\n",
    "GCOORD      = np.zeros((nnod,2))\n",
    "\n",
    "id = 0\n",
    "\n",
    "for i in range(0,ny):\n",
    "    for j in range(0,nx):\n",
    "        GCOORD[id,0] = j*dx;\n",
    "        GCOORD[id,1] = i*dy;\n",
    "        id          = id + 1;\n",
    "                       \n",
    "print(tabulate(GCOORD, headers=['Node #', 'X', 'Y'], showindex=True))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3cf4cb2e",
   "metadata": {},
   "source": [
    "Now we do the connectivity. Here again the first element will have index **0** and we count in the row direction!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "b388b4e9",
   "metadata": {},
   "outputs": [],
   "source": [
    "#E2N   = np.zeros((nel,nnodel), dtype=int) # connectivity matrix\n",
    "\n",
    "#for iel in range(0,nel):\n",
    "#    row        = ??? np.ceil()  / np.floor\n",
    "#    ind        = ???\n",
    "#    E2N[iel,:] = [ind, ind+1, ?, ?]\n",
    "\n",
    "#print(tabulate(E2N, headers=['Element #', 'Node 1', 'Node 2', 'Node 3', 'Node 4'], showindex=True))\n",
    "  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "160d4b41",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  Element #    Node 1    Node 2    Node 3    Node 4\n",
      "-----------  --------  --------  --------  --------\n",
      "          0         0         1         6         5\n",
      "          1         1         2         7         6\n",
      "          2         2         3         8         7\n",
      "          3         3         4         9         8\n",
      "          4         5         6        11        10\n",
      "          5         6         7        12        11\n",
      "          6         7         8        13        12\n",
      "          7         8         9        14        13\n",
      "          8        10        11        16        15\n",
      "          9        11        12        17        16\n",
      "         10        12        13        18        17\n",
      "         11        13        14        19        18\n"
     ]
    }
   ],
   "source": [
    "#hide\n",
    "E2N   = np.zeros((nel,nnodel), dtype=int) # connectivity matrix\n",
    "\n",
    "for iel in range(0,nel):\n",
    "    row        = iel//nex   \n",
    "    ind        = iel + row\n",
    "    E2N[iel,:] = [ind, ind+1, ind+nx+1, ind+nx]\n",
    "\n",
    "print(tabulate(E2N, headers=['Element #', 'Node 1', 'Node 2', 'Node 3', 'Node 4'], showindex=True))\n",
    "  "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1929e856",
   "metadata": {},
   "source": [
    "If we now want to get the coordinates of a specific element, we can do the following"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "e299f402",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.25 0.5  0.5  0.25]\n",
      "[0.33333333 0.33333333 0.66666667 0.66666667]\n"
     ]
    }
   ],
   "source": [
    "iel = 5 # current element\n",
    "\n",
    "print(np.take(GCOORD[:,0], E2N[iel,:])) # x coordinates\n",
    "print(np.take(GCOORD[:,1], E2N[iel,:])) # y coordinates\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ed6e250a",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "py3_htf_class",
   "language": "python",
   "name": "py3_htf_class"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
