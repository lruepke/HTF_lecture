/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  5                                     |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application HydrothermalSinglePhaseDarcyFoam; 

startFrom startTime;

startTime 0;

stopAt endTime;
// -------------commonly changed parameters ----------- 
endTime_year 40000;   //year
writeInterval_year 10; //year
purgeWrite 0;
deltaT 864000;
// ----------------------------------------------------
adjustTimeStep yes;
maxCo           0.8; 
maxDeltaT       157680000; 

writeControl adjustableRunTime;

writeFormat ascii;

writePrecision 8;

writeCompression off;

timeFormat general;

timePrecision 14;

runTimeModifiable true;

endTime #codeStream 
{ 
    code 
    #{ 
        scalar time_year = readScalar(dict.lookup("endTime_year")); 
        scalar end = time_year*365*86400;
        os << (end); 
    #}; 
}; 
writeInterval #codeStream 
{
    code 
    #{ 
        scalar time_year = readScalar(dict.lookup("writeInterval_year")); 
        scalar end = time_year*365*86400;
        os << (end); 
    #}; 
};

libs 
( 
    "libHydrothermalBoundaryConditions.so"
    "libHydroThermoPhysicalModels.so"
);

functions
{
    calPlumeT
    {
        libs                ("libutilityFunctionObjects.so");
        type                coded;
        enabled             true;
        writeControl        adjustableRunTime;
        writeInterval       $writeInterval;
        name                plumeTemperature;
        codeWrite
        #{
            //get maximum tempeature on the top boundary
            label patchID = mesh().boundaryMesh().findPatchID("seafloor"); 
            const volScalarField& T = mesh().lookupObject<volScalarField>("T");
            
            // write vent temperature
            std::ofstream fout("ventT.txt",std::ofstream::app);
            // Info<<"Plume Temperature: "<<mesh().time().value()/31536000<<"\t"<<Foam::gMax(T.boundaryField()[patchID])-273.15<<" C"<<endl;
            fout<<mesh().time().value()/31536000<<"\t"<<Foam::gMax(T.boundaryField()[patchID])-273.15<<std::endl;
            fout.close();
        #};
    }
}
